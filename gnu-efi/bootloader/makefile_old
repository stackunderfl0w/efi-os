SRC_DIR := src
OBJ_DIR := lib
BUILD_DIR := bin
DIRS := $(SRC_DIR) $(OBJ_DIR) $(BUILD_DIR)

CC := gcc
CFLAGS := -D__KERNEL__ -fpic -ffreestanding -fno-stack-protector -fno-stack-check -fshort-wchar -mno-red-zone -maccumulate-outgoing-args


hello:
	$(shell mkdir -p $(DIRS))
	$(CC) -I../inc $(CFLAGS) -c $(SRC_DIR)/main.c -o $(OBJ_DIR)/main.o -Ofast
	ld -shared -Bsymbolic -L/home/pat/Desktop/kernel/gnu-efi/x86_64/gnuefi/ -L/home/pat/Desktop/kernel/gnu-efi/x86_64/lib/ -T/home/pat/Desktop/kernel/gnu-efi/gnuefi/elf_x86_64_efi.lds /home/pat/Desktop/kernel/gnu-efi/x86_64/gnuefi/crt0-efi-x86_64.o $(OBJ_DIR)/main.o -o $(OBJ_DIR)/main.so -lgnuefi -lefi
	objcopy -j .text -j .sdata -j .data -j .dynamic -j .dynsym  -j .rel -j .rela -j .rel.* -j .rela.* -j .reloc --target efi-app-x86_64 --subsystem=10 $(OBJ_DIR)/main.so $(BUILD_DIR)/main.efi
	
boot:
	qemu-system-x86_64 -machine q35 -drive file=$(BUILD_DIR)/fat.img -m 256M -cpu qemu64 -drive if=pflash,format=raw,unit=0,file=../../OVMFbin/OVMF_CODE-pure-efi.fd,readonly=on -drive if=pflash,format=raw,unit=1,file=../../OVMFbin/OVMF_VARS-pure-efi.fd -net none

clean:

	rm -f lib/* bin/*

# incompatible types when returning type ‘EFI_FILE_HANDLE’ {aka ‘struct _EFI_FILE_HANDLE *’} but ‘EFI_FILE’ {aka ‘struct _EFI_FILE_HANDLE’} was expected
#rm -f .img *.efi *.so *.o
virt:
	rm -f virtual_disk.vdi
	VBoxManage convertfromraw fat.img virtual_disk.vdi
	VBoxManage internalcommands sethduuid virtual_disk.vdi {e5976d35-70f1-4d25-bd18-88ebcad38805} 
#rm -f $(BUILD_DIR)/fat.img
#dd if=/dev/zero of=$(BUILD_DIR)/fat.img bs=1k count=1440
#mformat -i $(BUILD_DIR)/fat.img -f 1440 ::
#mmd -i $(BUILD_DIR)/fat.img ::/EFI
#mmd -i $(BUILD_DIR)/fat.img ::/EFI/BOOT
#mcopy -i $(BUILD_DIR)/fat.img $(BUILD_DIR)/main.efi ::/EFI/BOOT
#mcopy -i $(BUILD_DIR)/fat.img startup.nsh ::/
#mcopy -i $(BUILD_DIR)/fat.img kernel.elf ::/
#mcopy -i $(BUILD_DIR)/fat.img test.txt ::/
#mcopy -i $(BUILD_DIR)/fat.img dat ::/resources
